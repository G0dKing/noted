:root {
  --case-width: 85vw;
  --br: calc(var(--case-width) / 22.2);
  --case-color: #b4b4b4;
  --case-padding: calc(var(--br) / 3.2);
  --keys-gap: 2px;
  --keys-padding: calc(var(--br) / 5.5);
  --plate-color: #e7e4e2;
  --shadow-angle: 135deg;
}

@media (max-width: 800px) {
  :root {
    --keys-gap: 1px;
  }
}

html,
body {
  height: 100%;
}

body {
  background: linear-gradient(var(--shadow-angle), #5c5b60, #2b2b2d);
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: "JetBrains Mono", monospace;
  letter-spacing: -0.01em;
  color: #3f454a;
}

svg {
  fill: none;
}

.case {
  --_font-size: calc(var(--br) / 27);

  display: flex;
  gap: var(--case-padding);
  padding: var(--case-padding);
  width: var(--case-width);
  position: relative;
  background: linear-gradient(var(--shadow-angle), #c9c9c9, #a3a3a5),
    var(--case-color);
  border-radius: 8em;
  font-size: var(--_font-size);
  user-select: none;
  box-shadow: inset 0.5em 0.5em 0 rgba(#fff, 0.4),
    -5em -5em 18em rgba(#fff, 0.1), 0.5em 0.5em 0 rgba(#000, 0.15),
    0.5em 0.5em 0 1em #727273, 6em 6em 18em rgba(#000, 0.2),
    2em 2em 8em rgba(#000, 0.2);

  &--animated {
    .screen__eye-l {
      animation: animRotate 4s linear infinite;
    }
    .screen__eye-r {
      animation: animRotate 1.5s linear infinite;
    }
    .screen__tracks {
      animation: animTracks 8s linear infinite;
    }
    .screen__tracks-ruler {
      animation: animRuler 1025ms linear infinite;
    }
    .screen__level {
      animation: animScreenLevelMeter 1.5s ease-in infinite;
    }
    .level-meter__bar::before {
      animation: animSideLevelMeter 1.5s ease-in infinite;
    }
  }
}

.plate {
  --_columns: 17;
  --_rows: 6;

  display: grid;
  gap: var(--keys-gap);
  grid-template-columns: repeat(calc(var(--_columns) * 2), 1fr);
  grid-template-rows: repeat(var(--_rows), 1fr);
  padding: var(--keys-gap);
  border-radius: 1.5em;
  background-color: #000;

  &__item {
    display: flex;
    grid-column: auto/span 2;
    background-color: var(--plate-color);
    border-radius: calc(var(--keys-gap) * 1.5);
    box-shadow: inset 0.5em 0.5em 0 rgba(#fff, 0.7),
      inset -0.5em -0.5em 0 rgba(#000, 0.2);
    overflow: hidden;

    &--w-1-5 {
      grid-column-end: span 3;
    }
    &--w-2 {
      grid-column-end: span 4;
    }
    &--w-4 {
      grid-column-end: span 8;
    }
    &--h-2 {
      grid-row-end: span 2;
    }

    &--power {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
    }

    &--screen {
      box-shadow: inset 0.5em 0.5em 0 rgba(#fff, 0.25),
        inset -0.5em -0.5em 0 rgba(#fff, 0.1);
      background: linear-gradient(var(--shadow-angle), #282828, #040507);
    }
  }
}

.speaker {
  width: 100%;
  padding: var(--keys-padding);
  color: #1c2025;

  svg {
    display: block;
    filter: drop-shadow(0.3em 0.3em 0 #fff);
  }
}

.screen {
  --_light-height: 110px;

  padding: var(--keys-padding);

  svg {
    width: 100%;
    height: 100%;
  }

  &__eye-l {
    transform-origin: 100px 55.5px;
  }

  &__eye-r {
    transform-origin: 249px 55.5px;
  }
}

.key-placeholder {
  margin: var(--keys-padding);
  border-radius: 20%;
  box-shadow: 1.5em 1.5em 3em rgba(#000, 0.2), -3px -3px 6px rgba(#fff, 0.8);
}

.key {
  width: 100%;
  position: relative;
  display: flex;
  justify-content: space-around;
  align-items: center;
  cursor: pointer;
  transition: box-shadow 200ms ease;

  &:active {
    box-shadow: inset 2.5em 2.5em 1.5em rgba(#000, 0.1),
      inset 0.5em 0.5em 1.5em rgba(#000, 0.4),
      inset -1em -1em 0.5em rgba(#000, 0.1);
  }

  &:before {
    content: "";
    position: absolute;
    inset: var(--keys-padding);
    border-radius: var(--br);
    box-shadow: 1.5em 1.5em 3em rgba(#000, 0.2),
      -1.5em -1.5em 3em rgba(#fff, 0.8);
  }

  &--sharp::before {
    aspect-ratio: 1;
    left: unset;
    right: unset;
  }

  &--sharp::after {
    content: "";
    position: absolute;
    top: var(--keys-padding);
    bottom: var(--keys-padding);
    aspect-ratio: 1;
    border-radius: 50%;
    background: linear-gradient(var(--shadow-angle), #363a3f, #161719);
    margin: calc(var(--br) / 18);
  }

  &--sharp-right::before,
  &--sharp-right::after {
    right: var(--_padding);
  }

  &--sharp-left::before,
  &--sharp-left::after {
    left: var(--_padding);
  }

  &__inner {
    text-align: center;
    line-height: 1.1;
  }

  &__icon {
    font-size: 0;

    svg {
      width: 70%;
    }
  }

  &__icon + .key__text {
    margin-top: 0.2em;
  }

  &__text {
    font-size: calc(var(--br) / 5);

    &--medium {
      font-size: calc(var(--br) / 3.1);
    }

    &--large {
      font-size: calc(var(--br) / 2);
      font-weight: 100;
      text-shadow: 1px 1px rgba(#fff, 0.8);
    }
  }
}

.key-knob {
  margin: auto;
  width: 57%;
  aspect-ratio: 1;
  padding: 1.5%;
  border-radius: 50%;
  background-color: rgba(#000, 0.15);
  box-shadow: inset 0.5em 0.5em 0 rgba(#000, 0.15),
    0.5em 0.5em 0 rgba(#fff, 0.6);

  &--tight {
    width: calc(100% - var(--keys-padding) * 2);
    padding: 5%;
    background-color: rgba(#000, 0.08);

    .key-knob__inner {
      background-color: #f4f4f4;
    }

    .key-knob__control {
      --key-knob-bg-color: #fafafa;

      width: 75%;

      &:before {
        content: "";
        position: absolute;
        top: 15%;
        left: 50%;
        transform: translateX(-50%);
        width: 20%;
        aspect-ratio: 1;
        border-radius: 50%;
        box-shadow: inset 0.5em 0.5em 0 rgba(#000, 0.2),
          0.5em 0.5em 0 rgba(#fff, 0.8);
      }
    }
  }

  &__inner {
    display: flex;
    width: 100%;
    aspect-ratio: 1;
    position: relative;
    border-radius: 50%;
    background-color: var(--plate-color);
    box-shadow: inset 1px 1px 0 rgba(#fff, 0.5), 1px 1px 0 rgba(#000, 0.15);

    &:after {
      content: "";
      position: absolute;
      inset: 21%;
      border-radius: inherit;
      box-shadow: 0.5em 0.5em 0.5em 0 rgba(#fff, 0.8) inset,
        -0.5em -0.5em 0.5em 0 rgba(#000, 0.25) inset,
        -0.5em -0.5em 0.5em 0 rgba(#fff, 0.42) inset,
        1.5em 1.5em 1.5em -1em rgba(#000, 0.25),
        4.5em 4.5em 2em rgba(#000, 0.12), 11em 11em 8em rgba(#000, 0.2);
    }
  }

  &__control {
    --key-knob-bg-color: #555;

    width: 45%;
    aspect-ratio: 1;
    position: relative;
    z-index: 1;
    margin: auto;
    border-radius: inherit;
    cursor: ns-resize;
    background: linear-gradient(
        var(--shadow-angle),
        color-mix(in srgb, var(--key-knob-bg-color), #fff 15%),
        color-mix(in srgb, var(--key-knob-bg-color), #000 15%)
      ),
      var(--key-knob-bg-color);
    box-shadow: -0.5em -0.5em 0.5em 0.25em rgba(#000, 0.3) inset,
      0.5em 0.5em 1.5em rgba(#000, 0.45), 1em 1em 3em rgba(#000, 0.3);

    &:after {
      content: "";
      position: absolute;
      inset: 0.5em;
      border-radius: inherit;
      box-shadow: 1em 1em 0 -1em rgba(#fff, 0.6) inset;
    }

    &--blue {
      --key-knob-bg-color: #181c31;
    }
    &--ochre {
      --key-knob-bg-color: #99714a;
    }
    &--gray {
      --key-knob-bg-color: #7f7c7c;
    }
    &--orange {
      --key-knob-bg-color: #d54a20;
    }
  }
}

.right-panel {
  display: grid;
  grid-template-rows: repeat(6, 1fr);
  align-items: center;
  justify-items: center;
}

.mic-status {
  grid-row-end: span 1;
  width: calc(var(--br) / 14);
  aspect-ratio: 1;
  border-radius: 50%;
  background-color: #000;
  box-shadow: 0.3em 0.3em 0 rgba(#fff, 0.7);
}

.level-meter {
  --_width: calc(var(--br) / 22);
  --_light-height: calc(var(--_width) * 2.1);
  --_lights: 14;

  grid-row-end: span 3;
  position: relative;

  &:before {
    content: "";
    position: absolute;
    top: calc(var(--_light-height) * 3.8);
    left: 50%;
    width: calc(var(--_width) * 14);
    height: 0.5em;
    transform: translateX(-50%);
    background-color: rgba(#000, 0.3);
  }

  &__bar {
    width: var(--_width);
    height: calc(var(--_light-height) * var(--_lights));
    position: relative;
    isolation: isolate;
    border-radius: var(--_width);
    background-color: #605e5b;

    &:before,
    &:after {
      content: "";
      position: absolute;
      inset: 0;
      border-radius: inherit;
    }

    &:before {
      top: auto;
      background-color: #fff;
    }

    &:after {
      background: radial-gradient(
          50% 50% at 50% 50%,
          transparent,
          transparent 75%,
          #d0c4b7 75%,
          #d0c4b7 100%
        )
        repeat 40% 0;
      background-size: 160% var(--_light-height);
      box-shadow: inset 0.5em 0.5em 0 rgba(#000, 0.2),
        inset 1em 0.5em 0.5em rgba(#000, 0.2), 0.5em 0.5em 0 rgba(#fff, 0.3);
    }
  }
}

.logo {
  grid-row-end: span 2;
  height: calc(var(--br) * 2);
  display: flex;
  gap: calc(var(--br) / 5);
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  color: #171a1c;

  &__text {
    font-size: calc(var(--br) / 1.6);
    font-weight: 100;
    letter-spacing: -0.06em;
    writing-mode: vertical-rl;
    transform: rotate(180deg);
  }

  &__tag {
    font-size: calc(var(--br) / 7);
    padding: 0.4em 0.4em 0.3em;
    border: 0.12em solid #000;
    border-radius: 0.3em;
  }
}

.power-switch {
  --_width: calc(var(--br) / 3.2);
  --_height: calc(var(--br) / 1.2);

  position: absolute;
  z-index: -1;
  right: calc(var(--_width) * -1);
  bottom: calc(
    100% / 6 - var(--case-padding) * 2 + var(--_height) / 2 - var(--keys-gap) *
      6
  );
  width: var(--_width);
  height: var(--_height);
  background: linear-gradient(
      to right,
      rgba(#000, 0.9),
      rgba(#000, 0.4) 20%,
      rgba(#000, 0.1)
    ),
    var(--plate-color);
  border-radius: 0 calc(var(--_width) / 2.5) calc(var(--_width) / 2.5) 0;
  box-shadow: -1.25em 0 0 -0.25em rgba(#000, 0.35) inset;
}

@keyframes animRotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(-359deg);
  }
}

@keyframes animRuler {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-44px);
  }
}

@keyframes animTracks {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-340px);
  }
}

@function generateLevels($steps) {
  $result: ();
  $initValue: percentage(random(100) / 100);

  @for $i from 1 through $steps {
    $value: if($initValue > 50, random(50), random(50) + 50);
    $result: append($result, percentage($value / 100));
  }
  @return $result;
}

@mixin generateLevelKeyframes($levels, $height, $offset: 0) {
  $levelHeight: $height * nth($levels, length($levels)) / 100%;

  @for $i from 0 through length($levels) {
    @if ($i > 0) {
      $levelHeight: $height * nth($levels, $i) / 100%;
    }

    #{$i * 100 / length($levels)}% {
      height: $levelHeight;
      @if ($offset > 0 and unit($levelHeight) == "px") {
        y: $offset - $levelHeight;
      }
    }
  }
}

$levelSteps: generateLevels(10);

@keyframes animScreenLevelMeter {
  @include generateLevelKeyframes($levelSteps, 70px, 116px);
}

@keyframes animSideLevelMeter {
  @include generateLevelKeyframes($levelSteps, 70%);
}
